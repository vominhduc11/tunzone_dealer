'use client';

import { useState } from 'react';

interface Resource {
  id: string;
  title: string;
  description: string;
  category: string;
  type: 'guide' | 'video' | 'pdf' | 'faq' | 'tool';
  icon: string;
  url: string;
  downloadSize?: string;
  duration?: string;
  difficulty: 'beginner' | 'intermediate' | 'advanced';
  tags: string[];
}

const resources: Resource[] = [
  {
    id: '1',
    title: 'H∆∞·ªõng D·∫´n ƒêƒÉng K√Ω Nh√† Ph√¢n Ph·ªëi',
    description: 'Quy tr√¨nh chi ti·∫øt ƒë·ªÉ tr·ªü th√†nh nh√† ph√¢n ph·ªëi ch√≠nh th·ª©c c·ªßa TuneZone',
    category: 'B·∫Øt ƒê·∫ßu',
    type: 'guide',
    icon: 'üìã',
    url: '/guides/dealer-registration',
    difficulty: 'beginner',
    tags: ['ƒëƒÉng k√Ω', 'nh√† ph√¢n ph·ªëi', 'b·∫Øt ƒë·∫ßu']
  },
  {
    id: '2',
    title: 'Video: C√°ch S·ª≠ D·ª•ng Dashboard',
    description: 'Video h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng dashboard nh√† ph√¢n ph·ªëi t·ª´ A-Z',
    category: 'H∆∞·ªõng D·∫´n S·ª≠ D·ª•ng',
    type: 'video',
    icon: 'üé•',
    url: '/videos/dashboard-tutorial',
    duration: '15 ph√∫t',
    difficulty: 'beginner',
    tags: ['dashboard', 'video', 'h∆∞·ªõng d·∫´n']
  },
  {
    id: '3',
    title: 'Catalog S·∫£n Ph·∫©m 2024',
    description: 'Danh m·ª•c ƒë·∫ßy ƒë·ªß t·∫•t c·∫£ s·∫£n ph·∫©m v·ªõi th√¥ng s·ªë k·ªπ thu·∫≠t v√† gi√° b√°n s·ªâ',
    category: 'S·∫£n Ph·∫©m',
    type: 'pdf',
    icon: 'üìÑ',
    url: '/downloads/product-catalog-2024.pdf',
    downloadSize: '25 MB',
    difficulty: 'beginner',
    tags: ['catalog', 's·∫£n ph·∫©m', '2024']
  },
  {
    id: '4',
    title: 'API Documentation',
    description: 'T√†i li·ªáu API cho t√≠ch h·ª£p h·ªá th·ªëng v√† t·ª± ƒë·ªông h√≥a ƒë∆°n h√†ng',
    category: 'K·ªπ Thu·∫≠t',
    type: 'guide',
    icon: '‚öôÔ∏è',
    url: '/docs/api',
    difficulty: 'advanced',
    tags: ['api', 't√≠ch h·ª£p', 'k·ªπ thu·∫≠t']
  },
  {
    id: '5',
    title: 'C√¥ng C·ª• T√≠nh Gi√° T·ª± ƒê·ªông',
    description: 'Tool t√≠nh to√°n gi√° b√°n l·∫ª d·ª±a tr√™n gi√° b√°n s·ªâ v√† t·ª∑ su·∫•t l·ª£i nhu·∫≠n',
    category: 'C√¥ng C·ª•',
    type: 'tool',
    icon: 'üßÆ',
    url: '/tools/price-calculator',
    difficulty: 'intermediate',
    tags: ['c√¥ng c·ª•', 'gi√°', 't√≠nh to√°n']
  },
  {
    id: '6',
    title: 'H∆∞·ªõng D·∫´n X·ª≠ L√Ω ƒê∆°n H√†ng',
    description: 'Quy tr√¨nh x·ª≠ l√Ω ƒë∆°n h√†ng t·ª´ nh·∫≠n ƒë∆°n ƒë·∫øn giao h√†ng',
    category: 'Quy Tr√¨nh',
    type: 'guide',
    icon: 'üì¶',
    url: '/guides/order-processing',
    difficulty: 'intermediate',
    tags: ['ƒë∆°n h√†ng', 'quy tr√¨nh', 'giao h√†ng']
  },
  {
    id: '7',
    title: 'Video: C√†i ƒê·∫∑t Thi·∫øt B·ªã √Çm Thanh',
    description: 'Series video h∆∞·ªõng d·∫´n c√†i ƒë·∫∑t v√† c·∫•u h√¨nh c√°c lo·∫°i thi·∫øt b·ªã √¢m thanh',
    category: 'K·ªπ Thu·∫≠t',
    type: 'video',
    icon: 'üîß',
    url: '/videos/audio-setup',
    duration: '45 ph√∫t',
    difficulty: 'intermediate',
    tags: ['c√†i ƒë·∫∑t', '√¢m thanh', 'k·ªπ thu·∫≠t']
  },
  {
    id: '8',
    title: 'Ch√≠nh S√°ch B·∫£o H√†nh & ƒê·ªïi Tr·∫£',
    description: 'T√†i li·ªáu chi ti·∫øt v·ªÅ ch√≠nh s√°ch b·∫£o h√†nh v√† quy tr√¨nh ƒë·ªïi tr·∫£',
    category: 'Ch√≠nh S√°ch',
    type: 'pdf',
    icon: 'üõ°Ô∏è',
    url: '/downloads/warranty-policy.pdf',
    downloadSize: '2 MB',
    difficulty: 'beginner',
    tags: ['b·∫£o h√†nh', 'ƒë·ªïi tr·∫£', 'ch√≠nh s√°ch']
  },
  {
    id: '9',
    title: 'Marketing Kit cho Nh√† Ph√¢n Ph·ªëi',
    description: 'B·ªô t√†i li·ªáu marketing, banner, brochure ƒë·ªÉ h·ªó tr·ª£ b√°n h√†ng',
    category: 'Marketing',
    type: 'pdf',
    icon: 'üé®',
    url: '/downloads/marketing-kit.zip',
    downloadSize: '150 MB',
    difficulty: 'beginner',
    tags: ['marketing', 'banner', 'brochure']
  },
  {
    id: '10',
    title: 'Troubleshooting Guide',
    description: 'H∆∞·ªõng d·∫´n x·ª≠ l√Ω c√°c s·ª± c·ªë th∆∞·ªùng g·∫∑p v·ªõi thi·∫øt b·ªã √¢m thanh',
    category: 'K·ªπ Thu·∫≠t',
    type: 'guide',
    icon: 'üîç',
    url: '/guides/troubleshooting',
    difficulty: 'advanced',
    tags: ['troubleshooting', 's·ª± c·ªë', 'k·ªπ thu·∫≠t']
  }
];

const categories = ['T·∫•t C·∫£', 'B·∫Øt ƒê·∫ßu', 'H∆∞·ªõng D·∫´n S·ª≠ D·ª•ng', 'S·∫£n Ph·∫©m', 'K·ªπ Thu·∫≠t', 'C√¥ng C·ª•', 'Quy Tr√¨nh', 'Ch√≠nh S√°ch', 'Marketing'];
const types = ['T·∫•t C·∫£', 'guide', 'video', 'pdf', 'tool'];
const difficulties = ['T·∫•t C·∫£', 'beginner', 'intermediate', 'advanced'];

export default function SupportResources() {
  const [selectedCategory, setSelectedCategory] = useState('T·∫•t C·∫£');
  const [selectedType, setSelectedType] = useState('T·∫•t C·∫£');
  const [selectedDifficulty, setSelectedDifficulty] = useState('T·∫•t C·∫£');
  const [searchTerm, setSearchTerm] = useState('');

  const filteredResources = resources.filter(resource => {
    const matchesCategory = selectedCategory === 'T·∫•t C·∫£' || resource.category === selectedCategory;
    const matchesType = selectedType === 'T·∫•t C·∫£' || resource.type === selectedType;
    const matchesDifficulty = selectedDifficulty === 'T·∫•t C·∫£' || resource.difficulty === selectedDifficulty;
    const matchesSearch = resource.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         resource.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         resource.tags.some(tag => tag.toLowerCase().includes(searchTerm.toLowerCase()));
    
    return matchesCategory && matchesType && matchesDifficulty && matchesSearch;
  });

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case 'beginner': return 'text-green-400 bg-green-900/30 border-green-700';
      case 'intermediate': return 'text-yellow-400 bg-yellow-900/30 border-yellow-700';
      case 'advanced': return 'text-red-400 bg-red-900/30 border-red-700';
      default: return 'text-gray-400 bg-gray-900/30 border-gray-700';
    }
  };

  const getDifficultyLabel = (difficulty: string) => {
    switch (difficulty) {
      case 'beginner': return 'C∆° B·∫£n';
      case 'intermediate': return 'Trung C·∫•p';
      case 'advanced': return 'N√¢ng Cao';
      default: return difficulty;
    }
  };

  const getTypeLabel = (type: string) => {
    switch (type) {
      case 'guide': return 'H∆∞·ªõng D·∫´n';
      case 'video': return 'Video';
      case 'pdf': return 'PDF';
      case 'tool': return 'C√¥ng C·ª•';
      default: return type;
    }
  };

  return (
    <div className="space-y-8">
      {/* Search and Filters */}
      <div className="space-y-6">
        {/* Search Bar */}
        <div className="relative animate-fade-in-up">
          <input
            type="text"
            placeholder="T√¨m ki·∫øm t√†i li·ªáu, video, c√¥ng c·ª•..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="w-full px-4 py-3 pl-12 bg-gray-800/50 backdrop-blur-sm border border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-blue-400 text-gray-100 placeholder-gray-400 transition-all duration-300"
          />
          <div className="absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400">
            üîç
          </div>
        </div>

        {/* Filters */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 animate-fade-in-up animation-delay-200">
          {/* Category Filter */}
          <div>
            <label className="block text-sm font-medium text-gray-200 mb-2">Danh M·ª•c</label>
            <select
              value={selectedCategory}
              onChange={(e) => setSelectedCategory(e.target.value)}
              className="w-full px-3 py-2 bg-gray-700/50 border border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-blue-400 text-gray-100 transition-all duration-300"
            >
              {categories.map(category => (
                <option key={category} value={category}>{category}</option>
              ))}
            </select>
          </div>

          {/* Type Filter */}
          <div>
            <label className="block text-sm font-medium text-gray-200 mb-2">Lo·∫°i T√†i Li·ªáu</label>
            <select
              value={selectedType}
              onChange={(e) => setSelectedType(e.target.value)}
              className="w-full px-3 py-2 bg-gray-700/50 border border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-blue-400 text-gray-100 transition-all duration-300"
            >
              {types.map(type => (
                <option key={type} value={type}>
                  {type === 'T·∫•t C·∫£' ? type : getTypeLabel(type)}
                </option>
              ))}
            </select>
          </div>

          {/* Difficulty Filter */}
          <div>
            <label className="block text-sm font-medium text-gray-200 mb-2">ƒê·ªô Kh√≥</label>
            <select
              value={selectedDifficulty}
              onChange={(e) => setSelectedDifficulty(e.target.value)}
              className="w-full px-3 py-2 bg-gray-700/50 border border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-blue-400 text-gray-100 transition-all duration-300"
            >
              {difficulties.map(difficulty => (
                <option key={difficulty} value={difficulty}>
                  {difficulty === 'T·∫•t C·∫£' ? difficulty : getDifficultyLabel(difficulty)}
                </option>
              ))}
            </select>
          </div>
        </div>
      </div>

      {/* Results Count */}
      <div className="text-gray-400 animate-fade-in-up animation-delay-300">
        T√¨m th·∫•y {filteredResources.length} t√†i li·ªáu
      </div>

      {/* Resources Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 animate-fade-in-up animation-delay-400">
        {filteredResources.length === 0 ? (
          <div className="col-span-full text-center py-12 text-gray-400">
            <div className="text-6xl mb-4">üìö</div>
            <p className="text-xl">Kh√¥ng t√¨m th·∫•y t√†i li·ªáu ph√π h·ª£p</p>
            <p className="mt-2">H√£y th·ª≠ thay ƒë·ªïi b·ªô l·ªçc ho·∫∑c t·ª´ kh√≥a t√¨m ki·∫øm</p>
          </div>
        ) : (
          filteredResources.map((resource, index) => (
            <div
              key={resource.id}
              className="bg-gray-800/50 backdrop-blur-sm border border-gray-700 rounded-lg p-6 hover:border-gray-600 hover:shadow-lg transition-all duration-300 transform hover:scale-105 animate-fade-in-up"
              style={{ animationDelay: `${index * 100}ms` }}
            >
              {/* Header */}
              <div className="flex items-start justify-between mb-4">
                <div className="text-3xl">{resource.icon}</div>
                <div className={`px-2 py-1 rounded-full text-xs font-medium border ${getDifficultyColor(resource.difficulty)}`}>
                  {getDifficultyLabel(resource.difficulty)}
                </div>
              </div>

              {/* Content */}
              <div className="mb-4">
                <h3 className="text-lg font-semibold text-gray-100 mb-2">{resource.title}</h3>
                <p className="text-gray-300 text-sm mb-3">{resource.description}</p>
                
                {/* Meta Info */}
                <div className="flex flex-wrap gap-2 text-xs text-gray-400 mb-3">
                  <span className="bg-gray-700/50 px-2 py-1 rounded">{resource.category}</span>
                  <span className="bg-blue-900/30 px-2 py-1 rounded">{getTypeLabel(resource.type)}</span>
                  {resource.duration && (
                    <span className="bg-green-900/30 px-2 py-1 rounded">‚è±Ô∏è {resource.duration}</span>
                  )}
                  {resource.downloadSize && (
                    <span className="bg-purple-900/30 px-2 py-1 rounded">üì¶ {resource.downloadSize}</span>
                  )}
                </div>

                {/* Tags */}
                <div className="flex flex-wrap gap-1 mb-4">
                  {resource.tags.slice(0, 3).map(tag => (
                    <span key={tag} className="text-xs bg-gray-700/30 text-gray-400 px-2 py-1 rounded">
                      #{tag}
                    </span>
                  ))}
                </div>
              </div>

              {/* Action Button */}
              <button
                onClick={() => window.open(resource.url, '_blank')}
                className="w-full bg-blue-600/80 hover:bg-blue-600 text-white py-2 px-4 rounded-lg font-medium transition-all duration-300 transform hover:scale-105 active:scale-95 flex items-center justify-center space-x-2"
              >
                {resource.type === 'pdf' && <span>üìÑ</span>}
                {resource.type === 'video' && <span>‚ñ∂Ô∏è</span>}
                {resource.type === 'guide' && <span>üìñ</span>}
                {resource.type === 'tool' && <span>üöÄ</span>}
                <span>
                  {resource.type === 'pdf' ? 'T·∫£i Xu·ªëng' : 
                   resource.type === 'video' ? 'Xem Video' :
                   resource.type === 'tool' ? 'S·ª≠ D·ª•ng' : 'Xem Chi Ti·∫øt'}
                </span>
              </button>
            </div>
          ))
        )}
      </div>

      {/* Quick Links */}
      <div className="bg-blue-900/30 backdrop-blur-sm border border-blue-700/50 rounded-lg p-6 animate-fade-in-up animation-delay-600">
        <h3 className="text-xl font-semibold text-gray-100 mb-4 flex items-center">
          <span className="mr-2">‚ö°</span>
          Li√™n K·∫øt Nhanh
        </h3>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
          <a
            href="/downloads/quick-start-guide.pdf"
            className="flex items-center p-3 bg-gray-700/50 rounded-lg hover:bg-gray-600/50 transition-all duration-300 transform hover:scale-105"
          >
            <span className="text-2xl mr-3">üöÄ</span>
            <div>
              <div className="font-medium text-gray-100">Quick Start</div>
              <div className="text-sm text-gray-400">B·∫Øt ƒë·∫ßu nhanh</div>
            </div>
          </a>
          
          <a
            href="/contact"
            className="flex items-center p-3 bg-gray-700/50 rounded-lg hover:bg-gray-600/50 transition-all duration-300 transform hover:scale-105"
          >
            <span className="text-2xl mr-3">üìû</span>
            <div>
              <div className="font-medium text-gray-100">Li√™n H·ªá</div>
              <div className="text-sm text-gray-400">H·ªó tr·ª£ tr·ª±c ti·∫øp</div>
            </div>
          </a>
          
          <a
            href="/dealer-dashboard"
            className="flex items-center p-3 bg-gray-700/50 rounded-lg hover:bg-gray-600/50 transition-all duration-300 transform hover:scale-105"
          >
            <span className="text-2xl mr-3">üìä</span>
            <div>
              <div className="font-medium text-gray-100">Dashboard</div>
              <div className="text-sm text-gray-400">Qu·∫£n l√Ω t√†i kho·∫£n</div>
            </div>
          </a>
          
          <a
            href="/products"
            className="flex items-center p-3 bg-gray-700/50 rounded-lg hover:bg-gray-600/50 transition-all duration-300 transform hover:scale-105"
          >
            <span className="text-2xl mr-3">üéµ</span>
            <div>
              <div className="font-medium text-gray-100">S·∫£n Ph·∫©m</div>
              <div className="text-sm text-gray-400">Danh m·ª•c ƒë·∫ßy ƒë·ªß</div>
            </div>
          </a>
        </div>
      </div>
    </div>
  );
}
